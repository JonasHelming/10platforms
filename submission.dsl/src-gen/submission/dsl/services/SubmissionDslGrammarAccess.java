/*
* generated by Xtext
*/
package submission.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SubmissionDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SubmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Submission");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSubmissionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubmissionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEMailKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEMailAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEMailEStringParserRuleCall_4_1_0 = (RuleCall)cEMailAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAnswerKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAnswerAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAnswerAnswerEnumRuleCall_5_1_0 = (RuleCall)cAnswerAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Submission:
		//	{Submission} "Submission" name=EString "{" ("eMail" eMail=EString)? ("answer" answer=Answer)? "}";
		public ParserRule getRule() { return rule; }

		//{Submission} "Submission" name=EString "{" ("eMail" eMail=EString)? ("answer" answer=Answer)? "}"
		public Group getGroup() { return cGroup; }

		//{Submission}
		public Action getSubmissionAction_0() { return cSubmissionAction_0; }

		//"Submission"
		public Keyword getSubmissionKeyword_1() { return cSubmissionKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("eMail" eMail=EString)?
		public Group getGroup_4() { return cGroup_4; }

		//"eMail"
		public Keyword getEMailKeyword_4_0() { return cEMailKeyword_4_0; }

		//eMail=EString
		public Assignment getEMailAssignment_4_1() { return cEMailAssignment_4_1; }

		//EString
		public RuleCall getEMailEStringParserRuleCall_4_1_0() { return cEMailEStringParserRuleCall_4_1_0; }

		//("answer" answer=Answer)?
		public Group getGroup_5() { return cGroup_5; }

		//"answer"
		public Keyword getAnswerKeyword_5_0() { return cAnswerKeyword_5_0; }

		//answer=Answer
		public Assignment getAnswerAssignment_5_1() { return cAnswerAssignment_5_1; }

		//Answer
		public RuleCall getAnswerAnswerEnumRuleCall_5_1_0() { return cAnswerAnswerEnumRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	
	
	public class AnswerElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAAKeyword_0_0 = (Keyword)cAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBBKeyword_1_0 = (Keyword)cBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Answer:
		//	A | B;
		public EnumRule getRule() { return rule; }

		//A | B
		public Alternatives getAlternatives() { return cAlternatives; }

		//A
		public EnumLiteralDeclaration getAEnumLiteralDeclaration_0() { return cAEnumLiteralDeclaration_0; }

		//"A"
		public Keyword getAAKeyword_0_0() { return cAAKeyword_0_0; }

		//B
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_1() { return cBEnumLiteralDeclaration_1; }

		//"B"
		public Keyword getBBKeyword_1_0() { return cBBKeyword_1_0; }
	}
	
	private final SubmissionElements pSubmission;
	private final EStringElements pEString;
	private final AnswerElements unknownRuleAnswer;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SubmissionDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSubmission = new SubmissionElements();
		this.pEString = new EStringElements();
		this.unknownRuleAnswer = new AnswerElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("submission.dsl.SubmissionDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Submission:
	//	{Submission} "Submission" name=EString "{" ("eMail" eMail=EString)? ("answer" answer=Answer)? "}";
	public SubmissionElements getSubmissionAccess() {
		return pSubmission;
	}
	
	public ParserRule getSubmissionRule() {
		return getSubmissionAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//enum Answer:
	//	A | B;
	public AnswerElements getAnswerAccess() {
		return unknownRuleAnswer;
	}
	
	public EnumRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
