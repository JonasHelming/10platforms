/*
* generated by Xtext
*/
grammar InternalSubmissionDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package submission.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package submission.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import submission.dsl.services.SubmissionDslGrammarAccess;

}

@parser::members {
 
 	private SubmissionDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SubmissionDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleSubmission
entryRuleSubmission 
:
{ before(grammarAccess.getSubmissionRule()); }
	 ruleSubmission
{ after(grammarAccess.getSubmissionRule()); } 
	 EOF 
;

// Rule Submission
ruleSubmission
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSubmissionAccess().getGroup()); }
(rule__Submission__Group__0)
{ after(grammarAccess.getSubmissionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Answer
ruleAnswer
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getAlternatives()); }
(rule__Answer__Alternatives)
{ after(grammarAccess.getAnswerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Answer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnswerAccess().getAEnumLiteralDeclaration_0()); }
(	'A' 
)
{ after(grammarAccess.getAnswerAccess().getAEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAnswerAccess().getBEnumLiteralDeclaration_1()); }
(	'B' 
)
{ after(grammarAccess.getAnswerAccess().getBEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Submission__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group__0__Impl
	rule__Submission__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getSubmissionAction_0()); }
(

)
{ after(grammarAccess.getSubmissionAccess().getSubmissionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group__1__Impl
	rule__Submission__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getSubmissionKeyword_1()); }

	'Submission' 

{ after(grammarAccess.getSubmissionAccess().getSubmissionKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group__2__Impl
	rule__Submission__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getNameAssignment_2()); }
(rule__Submission__NameAssignment_2)
{ after(grammarAccess.getSubmissionAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group__3__Impl
	rule__Submission__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSubmissionAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group__4__Impl
	rule__Submission__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getGroup_4()); }
(rule__Submission__Group_4__0)?
{ after(grammarAccess.getSubmissionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group__5__Impl
	rule__Submission__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getGroup_5()); }
(rule__Submission__Group_5__0)?
{ after(grammarAccess.getSubmissionAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getRightCurlyBracketKeyword_6()); }

	'}' 

{ after(grammarAccess.getSubmissionAccess().getRightCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Submission__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group_4__0__Impl
	rule__Submission__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getEMailKeyword_4_0()); }

	'eMail' 

{ after(grammarAccess.getSubmissionAccess().getEMailKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getEMailAssignment_4_1()); }
(rule__Submission__EMailAssignment_4_1)
{ after(grammarAccess.getSubmissionAccess().getEMailAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Submission__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group_5__0__Impl
	rule__Submission__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getAnswerKeyword_5_0()); }

	'answer' 

{ after(grammarAccess.getSubmissionAccess().getAnswerKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Submission__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Submission__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getAnswerAssignment_5_1()); }
(rule__Submission__AnswerAssignment_5_1)
{ after(grammarAccess.getSubmissionAccess().getAnswerAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Submission__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getSubmissionAccess().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__EMailAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getEMailEStringParserRuleCall_4_1_0()); }
	ruleEString{ after(grammarAccess.getSubmissionAccess().getEMailEStringParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Submission__AnswerAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSubmissionAccess().getAnswerAnswerEnumRuleCall_5_1_0()); }
	ruleAnswer{ after(grammarAccess.getSubmissionAccess().getAnswerAnswerEnumRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


